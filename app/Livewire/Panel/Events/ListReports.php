<?php

namespace App\Livewire\Panel\Events;

use App\Mail\DeliveryReport;
use App\Models\Pivots\Report;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Notifications\Notification;
use Filament\Tables\Actions\Action;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Columns\IconColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Concerns\InteractsWithTable;
use Filament\Tables\Contracts\HasTable;
use Filament\Tables\Table;
use Illuminate\Support\Facades\Mail;
use Illuminate\Validation\ValidationException;
use Livewire\Component;

class ListReports extends Component implements HasForms, HasTable
{
    use InteractsWithTable;
    use InteractsWithForms;

    public $supplier;

    public function table(Table $table): Table
    {
        return $table
            ->relationship(fn() => $this->supplier->reports())
            ->recordUrl(fn(Report $record) => route('admin.reports', ['report' => $record]))
            ->columns([
                TextColumn::make('user.user.name')
                    ->label(__('Generated by')),

                TextColumn::make('created_at')
                    ->formatStateUsing(fn (Report $record) =>
                        $record->dateTime('created_at')
                    ),

                IconColumn::make('emailed')
                    ->label(__('Enviado'))
                    ->boolean()
            ])
            ->filters([
                // ...
            ])
            ->actions([
                DeleteAction::make()
                    ->modalHeading(__('Borrar reporte')),

                Action::make('send-email')
                    ->icon('heroicon-m-envelope')
                    ->label(fn(Report $report) => !$report->emailed ? __('Enviar') : __('Reenviar'))
                    ->form(fn (Report $report) => [
                        TextInput::make('asunto')
                            ->default("Reporte de entregas {$report->dateTime('created_at')}"),
                        Textarea::make('mensaje'),
                    ])
                    ->action(function ($data, Report $report) {   
                        try {

                            Mail::to($this->supplier)
                            ->send(new DeliveryReport($report, [
                                'supplier' => $this->supplier?->name ?? '',
                                ...$data
                            ]));                            

                            $report->update([
                                'emailed' => true
                            ]);

                        } catch (\Exception $e) {
                            $this->onValidationError(ValidationException::withMessages([
                                __('Something went wrong, wait and try again.')
                            ]));
                        }
                    })
                
            ])
            ->bulkActions([
                DeleteBulkAction::make(),
            ]);
    }

    protected function onValidationError(ValidationException $exception): void
    {
        Notification::make()
            ->title($exception->getMessage())
            ->danger()
            ->send();
    }

    public function render()
    {
        return view('livewire.panel.events.list-reports');
    }
}
